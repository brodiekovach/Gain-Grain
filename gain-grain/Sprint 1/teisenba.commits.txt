I am the student who met with Shayana and Prof. Reid about the git blame not working due to many changes 
being overwritten later or files being deleted and code pasted to another file. All of the code I submitted
was listed here manually by looking back through my commits

Non-code related progress:
Watched 6 hour video to learn how to write html/css/js
Watched a few ~15-30 minute videos to understand our backend

Original homescreen code:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gain & Grain - Fitness Social Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #fafafa;
        }

        header {
            background-color: white;
            padding: 10px;
            border-bottom: 1px solid #dbdbdb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        header h1 {
            font-size: 24px;
            color: #2d89ef;
        }

        header .search-bar {
            flex: 1;
            margin: 0 15px;
        }

        header .search-bar input {
            width: 100%;
            padding: 8px;
            border-radius: 25px;
            border: 1px solid #dbdbdb;
        }

        header nav {
            display: flex;
            align-items: center;
        }

        header nav a {
            margin-left: 20px;
            text-decoration: none;
            color: #262626;
            font-size: 18px;
        }

        main {
            display: flex;
            justify-content: center;
            padding: 20px;
        }

        .feed {
            width: 600px;
        }

        .post {
            background-color: white;
            border: 1px solid #dbdbdb;
            margin-bottom: 20px;
            border-radius: 25px;
        }

        .post-header {
            display: flex;
            align-items: center;
            padding: 10px;
        }

        .post-header img {
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-right: 10px;
        }

        .post-header h3 {
            font-size: 16px;
        }

        .post-image img {
            width: 100%;
            border-bottom: 1px solid #dbdbdb;
        }

        .post-content {
            padding: 10px;
        }

        .post-content h4 {
            margin-bottom: 5px;
            font-size: 18px;
        }

        .post-content p {
            font-size: 14px;
            color: #555;
        }

        .post-actions {
            display: flex;
            padding: 10px;
            justify-content: space-around;
        }

        .post-actions button {
            border: none;
            background-color: white;
            cursor: pointer;
            font-size: 16px;
        }

        .sidebar {
            width: 250px;
            border-radius: 25px;
            margin-left: 20px;
        }

        .profile {
            background-color: white;
            border: 1px solid #dbdbdb;
            padding: 10px;
            text-align: center;
        }

        .profile img {
            border-radius: 50%;
            width: 80px;
            height: 80px;
        }

        .profile h2 {
            margin-top: 10px;
        }

        /* Additional Sidebar Content */
        .workout-suggestions {
            margin-top: 20px;
            background-color: white;
            padding: 10px;
            border-radius: 25px;
            border: 1px solid #dbdbdb;
        }

        .workout-suggestions h3 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .workout-suggestions p {
            font-size: 14px;
            color: #555;
            margin-bottom: 10px;
        }

        .meal-suggestions {
            margin-top: 20px;
            background-color: white;
            padding: 10px;
            border-radius: 25px;
            border: 1px solid #dbdbdb;
        }

        .meal-suggestions h3 {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .meal-suggestions p {
            font-size: 14px;
            color: #555;
            margin-bottom: 10px;
        }

        /* Footer Section */
        footer {
            background-color: #2d89ef;
            color: white;
            text-align: center;
            padding: 10px 0;
            margin-top: 40px;
        }

        footer p {
            margin: 0;
        }
    </style>
</head>

<body>

    <header>
        <h1>Gain & Grain</h1>
        <div class="search-bar">
            <input type="text" placeholder="Search...">
        </div>
        <nav>
            <a href="#">Home</a>
            <a href="#">Profile</a>
            <a href="#">Messages</a>
        </nav>
    </header>

    <main>
        <!-- Feed Section -->
        <div class="feed">
            <div class="post">
                <div class="post-header">
                    <img src="https://via.placeholder.com/40" alt="User Profile">
                    <h3>@user123</h3>
                </div>
                <div class="post-image">
                    <img src="https://via.placeholder.com/600x400" alt="Workout Image">
                </div>
                <div class="post-content">
                    <h4>Full-Body Workout Routine</h4>
                    <p>Try out this full-body workout to build strength and endurance. #GainAndGrain #Workout
                        #FitnessJourney</p>
                </div>
                <div class="post-actions">
                    <button>Like</button>
                    <button>Comment</button>
                    <button>Share</button>
                </div>
            </div>

            <!-- Repeating Posts to Add Length -->
            <div class="post">
                <div class="post-header">
                    <img src="https://via.placeholder.com/40" alt="User Profile">
                    <h3>@fitchef</h3>
                </div>
                <div class="post-image">
                    <img src="https://via.placeholder.com/600x400" alt="Meal Image">
                </div>
                <div class="post-content">
                    <h4>Healthy Chicken Salad</h4>
                    <p>Here's a high-protein meal perfect for recovery. #MealPlan #HealthyEating #GainAndGrain</p>
                </div>
                <div class="post-actions">
                    <button>Like</button>
                    <button>Comment</button>
                    <button>Share</button>
                </div>
            </div>

            <!-- More Posts for Length -->
            <div class="post">
                <div class="post-header">
                    <img src="https://via.placeholder.com/40" alt="User Profile">
                    <h3>@runnerlife</h3>
                </div>
                <div class="post-image">
                    <img src="https://via.placeholder.com/600x400" alt="Run Image">
                </div>
                <div class="post-content">
                    <h4>Morning 5K Run</h4>
                    <p>Feeling great after this morning's run! #RunnerLife #GainAndGrain</p>
                </div>
                <div class="post-actions">
                    <button>Like</button>
                    <button>Comment</button>
                    <button>Share</button>
                </div>
            </div>

            <div class="post">
                <div class="post-header">
                    <img src="https://via.placeholder.com/40" alt="User Profile">
                    <h3>@gainspro</h3>
                </div>
                <div class="post-image">
                    <img src="https://via.placeholder.com/600x400" alt="Gym Image">
                </div>
                <div class="post-content">
                    <h4>Leg Day!</h4>
                    <p>Can't skip leg day. #GymLife #GainAndGrain</p>
                </div>
                <div class="post-actions">
                    <button>Like</button>
                    <button>Comment</button>
                    <button>Share</button>
                </div>
            </div>
        </div>

        <!-- Sidebar Section -->
        <aside class="sidebar">
            <div class="profile">
                <img src="https://via.placeholder.com/80" alt="Your Profile">
                <h2>@yourusername</h2>
                <p>Fitness Enthusiast | Meal Planner</p>
            </div>

            <div class="workout-suggestions">
                <h3>Workout Suggestions</h3>
                <p>Upper Body Strength</p>
                <p>Cardio Blast</p>
                <p>Yoga for Flexibility</p>
            </div>

            <div class="meal-suggestions">
                <h3>Meal Suggestions</h3>
                <p>Grilled Salmon Salad</p>
                <p>Protein Smoothie</p>
                <p>Quinoa Power Bowl</p>
            </div>
        </aside>
    </main>



.add-button:hover {
    background-color: #0056b3; /* Darken color on hover */
}





Original calendar code:
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Calendar</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .calendar {
            width: 100%;
            max-width: 1000px;
            /* Optional: Limit the max width */
            border: 1px solid #ccc;
            border-radius: 8px;
            overflow: hidden;
            background-color: #fff;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #FF8200;
            color: white;
        }

        .days {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
        }

        .day-name {
            text-align: center;
            font-weight: bold;
            padding: 10px 0;
            background-color: #e9ecef;
        }

        #calendar-days {
            display: contents;
        }

        .day {
            border: 1px solid #ccc;
            height: 100px;
            text-align: center;
            padding: 10px;
            box-sizing: border-box;
        }
    </style>
</head>

<body>
    <div class="calendar">
        <header>
            <h1 id="month-year"></h1>
            <button id="prev">Previous</button>
            <button id="next">Next</button>
        </header>
        <div class="days">
            <div class="day-name">Sun</div>
            <div class="day-name">Mon</div>
            <div class="day-name">Tue</div>
            <div class="day-name">Wed</div>
            <div class="day-name">Thu</div>
            <div class="day-name">Fri</div>
            <div class="day-name">Sat</div>
            <div id="calendar-days"></div>
        </div>
    </div>
    <script>
        const monthYearDisplay = document.getElementById("month-year");
        const calendarDays = document.getElementById("calendar-days");
        const prevButton = document.getElementById("prev");
        const nextButton = document.getElementById("next");

        let currentDate = new Date();

        function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();

            monthYearDisplay.textContent = `${currentDate.toLocaleString("default", { month: "long" })} ${year}`;

            // Clear previous days
            calendarDays.innerHTML = "";

            const firstDayOfMonth = new Date(year, month, 1);
            const lastDayOfMonth = new Date(year, month + 1, 0);

            // Fill in the days
            for (let i = 0; i < firstDayOfMonth.getDay(); i++) {
                const emptyDay = document.createElement("div");
                emptyDay.classList.add("day");
                calendarDays.appendChild(emptyDay);
            }

            for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
                const dayElement = document.createElement("div");
                dayElement.classList.add("day");
                dayElement.textContent = day;
                calendarDays.appendChild(dayElement);
            }
        }

        // Button functionality
        prevButton.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar();
        });

        nextButton.addEventListener("click", () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar();
        });

        // Initial render
        renderCalendar();
    </script>
</body>

</html>





Current calendar.js:
import React, { useState, useEffect } from 'react';
//import './custom_calendar.css'; // Import your CSS for styling
import { FaAngleLeft, FaAngleRight, FaPlus, FaTimes } from 'react-icons/fa'; // Use FontAwesome Icons
import '../style.css'

const CustomCalendar = () => {
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [events, setEvents] = useState([]);
    const [showAddEvent, setShowAddEvent] = useState(false);
    const [newEvent, setNewEvent] = useState({ name: '', from: '', to: '' });

    useEffect(() => {
        // Logic to load events, etc.
    }, [currentMonth]);

    const handleNextMonth = () => {
        setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() + 1)));
    };

    const handlePrevMonth = () => {
        setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() - 1)));
    };

    const handleAddEvent = () => {
        setEvents([...events, newEvent]);
        setNewEvent({ name: '', from: '', to: '' });
        setShowAddEvent(false);
    };

    return (
        <div className="container">
            <div className="left">
                <div className="calendar">
                    <div className="month">
                        <FaAngleLeft className="prev" onClick={handlePrevMonth} />
                        <div className="date">
                            {currentMonth.toLocaleString('default', { month: 'long' })}{' '}
                            {currentMonth.getFullYear()}
                        </div>
                        <FaAngleRight className="next" onClick={handleNextMonth} />
                    </div>
                    <div className="weekdays">
                        <div>Sun</div>
                        <div>Mon</div>
                        <div>Tue</div>
                        <div>Wed</div>
                        <div>Thu</div>
                        <div>Fri</div>
                        <div>Sat</div>
                    </div>
                    <div className="days">
                        /* Generate days of the current month here */
                    </div>
                    <div className="goto-today">
                        <div className="goto">
                            <input type="text" placeholder="mm/yyyy" className="date-input" />
                            <button className="goto-btn">Go</button>
                        </div>
                        <button className="today-btn">Today</button>
                    </div>
                </div>
            </div>
            <div className="right">
                <div className="today-date">
                    <div className="event-day">{currentMonth.toLocaleDateString('default', { weekday: 'long' })}</div>
                    <div className="event-date">{currentMonth.toDateString()}</div>
                </div>
                <div className="events">
                    {events.map((event, index) => (
                        <div key={index} className="event-item">
                            <span>{event.name}</span> from <span>{event.from}</span> to <span>{event.to}</span>
                        </div>
                    ))}
                </div>
                {showAddEvent && (
                    <div className="add-event-wrapper">
                        <div className="add-event-header">
                            <div className="title">Add Event</div>
                            <FaTimes className="close" onClick={() => setShowAddEvent(false)} />
                        </div>
                        <div className="add-event-body">
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Name"
                                    value={newEvent.name}
                                    onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}
                                />
                            </div>
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Time From"
                                    value={newEvent.from}
                                    onChange={(e) => setNewEvent({ ...newEvent, from: e.target.value })}
                                />
                            </div>
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Time To"
                                    value={newEvent.to}
                                    onChange={(e) => setNewEvent({ ...newEvent, to: e.target.value })}
                                />
                            </div>
                        </div>
                        <div className="add-event-footer">
                            <button className="add-event-btn" onClick={handleAddEvent}>
                                Add Event
                            </button>
                        </div>
                    </div>
                )}
                <button className="add-event" onClick={() => setShowAddEvent(true)}>
                    <FaPlus />
                </button>
            </div>
        </div>
    );
};

export default CustomCalendar;





Current index.html for calendar
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description"
        content="Stay organized with our user-friendly Calendar featuring events, reminders, and a customizable interface. Built with HTML, CSS, and JavaScript. Start scheduling today!" />
    <meta name="keywords" content="calendar, events, reminders, javascript, html, css, open source coding" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
        integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="style.css" />
    <title>Gym Calendar with Events</title>
</head>

<body>
    <div class="container">
        <div class="left">
            <div class="calendar">
                <div class="month">
                    <i class="fas fa-angle-left prev"></i>
                    <div class="date">december 2015</div>
                    <i class="fas fa-angle-right next"></i>
                </div>
                <div class="weekdays">
                    <div>Sun</div>
                    <div>Mon</div>
                    <div>Tue</div>
                    <div>Wed</div>
                    <div>Thu</div>
                    <div>Fri</div>
                    <div>Sat</div>
                </div>
                <div class="days"></div>
                <div class="goto-today">
                    <div class="goto">
                        <input type="text" placeholder="mm/yyyy" class="date-input" />
                        <button class="goto-btn">Go</button>
                    </div>
                    <button class="today-btn">Today</button>
                </div>
            </div>
        </div>
        <div class="right">
            <div class="today-date">
                <div class="event-day">wed</div>
                <div class="event-date">12th december 2022</div>
            </div>
            <div class="events"></div>
            <div class="add-event-wrapper">
                <div class="add-event-header">
                    <div class="title">Add Event</div>
                    <i class="fas fa-times close"></i>
                </div>
                <div class="add-event-body">
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Name" class="event-name" />
                    </div>
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Time From" class="event-time-from" />
                    </div>
                    <div class="add-event-input">
                        <input type="text" placeholder="Event Time To" class="event-time-to" />
                    </div>
                </div>
                <div class="add-event-footer">
                    <button class="add-event-btn">Add Event</button>
                </div>
            </div>
        </div>
        <button class="add-event">
            <i class="fas fa-plus"></i>
        </button>
    </div>



    <script src="script.js"></script>
</body>

</html>





Current calendar script.js:
const calendar = document.querySelector(".calendar"),
    date = document.querySelector(".date"),
    daysContainer = document.querySelector(".days"),
    prev = document.querySelector(".prev"),
    next = document.querySelector(".next"),
    todayBtn = document.querySelector(".today-btn"),
    gotoBtn = document.querySelector(".goto-btn"),
    dateInput = document.querySelector(".date-input"),
    eventDay = document.querySelector(".event-day"),
    eventDate = document.querySelector(".event-date"),
    eventsContainer = document.querySelector(".events"),
    addEventBtn = document.querySelector(".add-event"),
    addEventWrapper = document.querySelector(".add-event-wrapper "),
    addEventCloseBtn = document.querySelector(".close "),
    addEventTitle = document.querySelector(".event-name "),
    addEventFrom = document.querySelector(".event-time-from "),
    addEventTo = document.querySelector(".event-time-to "),
    addEventSubmit = document.querySelector(".add-event-btn ");

let today = new Date();
let activeDay;
let month = today.getMonth();
let year = today.getFullYear();

const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
];

const eventsArr = [];
getEvents();
console.log(eventsArr);

//function to add days in days with class day and prev-date next-date on previous month and next month days and active on today
function initCalendar() {
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const prevLastDay = new Date(year, month, 0);
    const prevDays = prevLastDay.getDate();
    const lastDate = lastDay.getDate();
    const day = firstDay.getDay();
    const nextDays = 7 - lastDay.getDay() - 1;

    date.innerHTML = months[month] + " " + year;

    let days = "";

    for (let x = day; x > 0; x--) {
        days += `<div class="day prev-date">${prevDays - x + 1}</div>`;
    }

    for (let i = 1; i <= lastDate; i++) {
        //check if event is present on that day
        let event = false;
        eventsArr.forEach((eventObj) => {
            if (
                eventObj.day === i &&
                eventObj.month === month + 1 &&
                eventObj.year === year
            ) {
                event = true;
            }
        });
        if (
            i === new Date().getDate() &&
            year === new Date().getFullYear() &&
            month === new Date().getMonth()
        ) {
            activeDay = i;
            getActiveDay(i);
            updateEvents(i);
            if (event) {
                days += `<div class="day today active event">${i}</div>`;
            } else {
                days += `<div class="day today active">${i}</div>`;
            }
        } else {
            if (event) {
                days += `<div class="day event">${i}</div>`;
            } else {
                days += `<div class="day ">${i}</div>`;
            }
        }
    }

    for (let j = 1; j <= nextDays; j++) {
        days += `<div class="day next-date">${j}</div>`;
    }
    daysContainer.innerHTML = days;
    addListner();
}

//function to add month and year on prev and next button
function prevMonth() {
    month--;
    if (month < 0) {
        month = 11;
        year--;
    }
    initCalendar();
}

function nextMonth() {
    month++;
    if (month > 11) {
        month = 0;
        year++;
    }
    initCalendar();
}

prev.addEventListener("click", prevMonth);
next.addEventListener("click", nextMonth);

initCalendar();

//function to add active on day
function addListner() {
    const days = document.querySelectorAll(".day");
    days.forEach((day) => {
        day.addEventListener("click", (e) => {
            getActiveDay(e.target.innerHTML);
            updateEvents(Number(e.target.innerHTML));
            activeDay = Number(e.target.innerHTML);
            //remove active
            days.forEach((day) => {
                day.classList.remove("active");
            });
            //if clicked prev-date or next-date switch to that month
            if (e.target.classList.contains("prev-date")) {
                prevMonth();
                //add active to clicked day afte month is change
                setTimeout(() => {
                    //add active where no prev-date or next-date
                    const days = document.querySelectorAll(".day");
                    days.forEach((day) => {
                        if (
                            !day.classList.contains("prev-date") &&
                            day.innerHTML === e.target.innerHTML
                        ) {
                            day.classList.add("active");
                        }
                    });
                }, 100);
            } else if (e.target.classList.contains("next-date")) {
                nextMonth();
                //add active to clicked day afte month is changed
                setTimeout(() => {
                    const days = document.querySelectorAll(".day");
                    days.forEach((day) => {
                        if (
                            !day.classList.contains("next-date") &&
                            day.innerHTML === e.target.innerHTML
                        ) {
                            day.classList.add("active");
                        }
                    });
                }, 100);
            } else {
                e.target.classList.add("active");
            }
        });
    });
}

todayBtn.addEventListener("click", () => {
    today = new Date();
    month = today.getMonth();
    year = today.getFullYear();
    initCalendar();
});

dateInput.addEventListener("input", (e) => {
    dateInput.value = dateInput.value.replace(/[^0-9/]/g, "");
    if (dateInput.value.length === 2) {
        dateInput.value += "/";
    }
    if (dateInput.value.length > 7) {
        dateInput.value = dateInput.value.slice(0, 7);
    }
    if (e.inputType === "deleteContentBackward") {
        if (dateInput.value.length === 3) {
            dateInput.value = dateInput.value.slice(0, 2);
        }
    }
});

gotoBtn.addEventListener("click", gotoDate);

function gotoDate() {
    console.log("here");
    const dateArr = dateInput.value.split("/");
    if (dateArr.length === 2) {
        if (dateArr[0] > 0 && dateArr[0] < 13 && dateArr[1].length === 4) {
            month = dateArr[0] - 1;
            year = dateArr[1];
            initCalendar();
            return;
        }
    }
    alert("Invalid Date");
}

//function get active day day name and date and update eventday eventdate
function getActiveDay(date) {
    const day = new Date(year, month, date);
    const dayName = day.toString().split(" ")[0];
    eventDay.innerHTML = dayName;
    eventDate.innerHTML = date + " " + months[month] + " " + year;
}

//function update events when a day is active
function updateEvents(date) {
    let events = "";
    eventsArr.forEach((event) => {
        if (
            date === event.day &&
            month + 1 === event.month &&
            year === event.year
        ) {
            event.events.forEach((event) => {
                events += `<div class="event">
            <div class="title">
              <i class="fas fa-circle"></i>
              <h3 class="event-title">${event.title}</h3>
            </div>
            <div class="event-time">
              <span class="event-time">${event.time}</span>
            </div>
        </div>`;
            });
        }
    });
    if (events === "") {
        events = `<div class="no-event">
            <h3>No Events</h3>
        </div>`;
    }
    eventsContainer.innerHTML = events;
    saveEvents();
}

//function to add event
addEventBtn.addEventListener("click", () => {
    addEventWrapper.classList.toggle("active");
});

addEventCloseBtn.addEventListener("click", () => {
    addEventWrapper.classList.remove("active");
});

document.addEventListener("click", (e) => {
    if (e.target !== addEventBtn && !addEventWrapper.contains(e.target)) {
        addEventWrapper.classList.remove("active");
    }
});

//allow 50 chars in eventtitle
addEventTitle.addEventListener("input", (e) => {
    addEventTitle.value = addEventTitle.value.slice(0, 60);
});

defineProperty();

//allow only time in eventtime from and to
addEventFrom.addEventListener("input", (e) => {
    addEventFrom.value = addEventFrom.value.replace(/[^0-9:]/g, "");
    if (addEventFrom.value.length === 2) {
        addEventFrom.value += ":";
    }
    if (addEventFrom.value.length > 5) {
        addEventFrom.value = addEventFrom.value.slice(0, 5);
    }
});

addEventTo.addEventListener("input", (e) => {
    addEventTo.value = addEventTo.value.replace(/[^0-9:]/g, "");
    if (addEventTo.value.length === 2) {
        addEventTo.value += ":";
    }
    if (addEventTo.value.length > 5) {
        addEventTo.value = addEventTo.value.slice(0, 5);
    }
});

//function to add event to eventsArr
addEventSubmit.addEventListener("click", () => {
    const eventTitle = addEventTitle.value;
    const eventTimeFrom = addEventFrom.value;
    const eventTimeTo = addEventTo.value;
    if (eventTitle === "" || eventTimeFrom === "" || eventTimeTo === "") {
        alert("Please fill all the fields");
        return;
    }

    //check correct time format 24 hour
    const timeFromArr = eventTimeFrom.split(":");
    const timeToArr = eventTimeTo.split(":");
    if (
        timeFromArr.length !== 2 ||
        timeToArr.length !== 2 ||
        timeFromArr[0] > 23 ||
        timeFromArr[1] > 59 ||
        timeToArr[0] > 23 ||
        timeToArr[1] > 59
    ) {
        alert("Invalid Time Format");
        return;
    }

    const timeFrom = convertTime(eventTimeFrom);
    const timeTo = convertTime(eventTimeTo);

    //check if event is already added
    let eventExist = false;
    eventsArr.forEach((event) => {
        if (
            event.day === activeDay &&
            event.month === month + 1 &&
            event.year === year
        ) {
            event.events.forEach((event) => {
                if (event.title === eventTitle) {
                    eventExist = true;
                }
            });
        }
    });
    if (eventExist) {
        alert("Event already added");
        return;
    }
    const newEvent = {
        title: eventTitle,
        time: timeFrom + " - " + timeTo,
    };
    console.log(newEvent);
    console.log(activeDay);
    let eventAdded = false;
    if (eventsArr.length > 0) {
        eventsArr.forEach((item) => {
            if (
                item.day === activeDay &&
                item.month === month + 1 &&
                item.year === year
            ) {
                item.events.push(newEvent);
                eventAdded = true;
            }
        });
    }

    if (!eventAdded) {
        eventsArr.push({
            day: activeDay,
            month: month + 1,
            year: year,
            events: [newEvent],
        });
    }

    console.log(eventsArr);
    addEventWrapper.classList.remove("active");
    addEventTitle.value = "";
    addEventFrom.value = "";
    addEventTo.value = "";
    updateEvents(activeDay);
    //select active day and add event class if not added
    const activeDayEl = document.querySelector(".day.active");
    if (!activeDayEl.classList.contains("event")) {
        activeDayEl.classList.add("event");
    }
});

//function to delete event when clicked on event
eventsContainer.addEventListener("click", (e) => {
    if (e.target.classList.contains("event")) {
        if (confirm("Are you sure you want to delete this event?")) {
            const eventTitle = e.target.children[0].children[1].innerHTML;
            eventsArr.forEach((event) => {
                if (
                    event.day === activeDay &&
                    event.month === month + 1 &&
                    event.year === year
                ) {
                    event.events.forEach((item, index) => {
                        if (item.title === eventTitle) {
                            event.events.splice(index, 1);
                        }
                    });
                    //if no events left in a day then remove that day from eventsArr
                    if (event.events.length === 0) {
                        eventsArr.splice(eventsArr.indexOf(event), 1);
                        //remove event class from day
                        const activeDayEl = document.querySelector(".day.active");
                        if (activeDayEl.classList.contains("event")) {
                            activeDayEl.classList.remove("event");
                        }
                    }
                }
            });
            updateEvents(activeDay);
        }
    }
});

//function to save events in local storage
function saveEvents() {
    localStorage.setItem("events", JSON.stringify(eventsArr));
}

//function to get events from local storage
function getEvents() {
    //check if events are already saved in local storage then return event else nothing
    if (localStorage.getItem("events") === null) {
        return;
    }
    eventsArr.push(...JSON.parse(localStorage.getItem("events")));
}

function convertTime(time) {
    //convert time to 24 hour format
    let timeArr = time.split(":");
    let timeHour = timeArr[0];
    let timeMin = timeArr[1];
    let timeFormat = timeHour >= 12 ? "PM" : "AM";
    timeHour = timeHour % 12 || 12;
    time = timeHour + ":" + timeMin + " " + timeFormat;
    return time;
}





Current calendar page.js:
'use client';

import React, { useState, useEffect } from 'react';
import { FaAngleLeft, FaAngleRight, FaPlus, FaTimes } from 'react-icons/fa';
import './style.css'

const CustomCalendar = () => {
    const [currentMonth, setCurrentMonth] = useState(new Date());
    const [eventsArr, setEventsArr] = useState([]);
    const [showAddEvent, setShowAddEvent] = useState(false);
    const [newEvent, setNewEvent] = useState({ name: '', from: '', to: '' });
    const [activeDay, setActiveDay] = useState(null);
    const [days, setDays] = useState([]);

    const months = [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ];

    useEffect(() => {
        initCalendar();
    }, [currentMonth]);

    const handleNextMonth = () => {
        setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() + 1)));
    };

    const handlePrevMonth = () => {
        setCurrentMonth(new Date(currentMonth.setMonth(currentMonth.getMonth() - 1)));
    };

    const handleAddEvent = () => {
        if (activeDay) {
            const dayEvents = eventsArr.find(event =>
                event.day === activeDay &&
                event.month === currentMonth.getMonth() + 1 &&
                event.year === currentMonth.getFullYear());

            if (dayEvents) {
                dayEvents.events.push(newEvent);
            } else {
                setEventsArr([...eventsArr, {
                    day: activeDay,
                    month: currentMonth.getMonth() + 1,
                    year: currentMonth.getFullYear(),
                    events: [newEvent],
                }]);
            }

            setNewEvent({ name: '', from: '', to: '' });
            setShowAddEvent(false);
        }
    };

    const initCalendar = () => {
        const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
        const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
        const prevLastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 0);
        const prevDays = prevLastDay.getDate();
        const lastDate = lastDay.getDate();
        const dayOfWeek = firstDay.getDay();
        const nextDays = 7 - lastDay.getDay() - 1;

        let calendarDays = [];

        for (let x = dayOfWeek; x > 0; x--) {
            calendarDays.push({ day: prevDays - x + 1, isPrevMonth: true });
        }

        for (let i = 1; i <= lastDate; i++) {
            const hasEvent = eventsArr.some(event =>
                event.day === i &&
                event.month === currentMonth.getMonth() + 1 &&
                event.year === currentMonth.getFullYear());
            calendarDays.push({ day: i, isActive: i === activeDay, hasEvent });
        }

        for (let j = 1; j <= nextDays; j++) {
            calendarDays.push({ day: j, isNextMonth: true });
        }

        setDays(calendarDays);
    };

    const handleDayClick = (day, isPrevMonth, isNextMonth) => {
        if (isPrevMonth) {
            handlePrevMonth();
        } else if (isNextMonth) {
            handleNextMonth();
        } else {
            setActiveDay(day);
        }
    };

    const renderDays = () => {
        return days.map((dayObj, index) => (
            <div
                key={index}
                className={`day ${dayObj.isPrevMonth ? 'prev-date' : ''} ${dayObj.isNextMonth ? 'next-date' : ''} ${dayObj.isActive ? 'active' : ''} ${dayObj.hasEvent ? 'event' : ''}`}
                onClick={() => handleDayClick(dayObj.day, dayObj.isPrevMonth, dayObj.isNextMonth)}
            >
                {dayObj.day}
            </div>
        ));
    };

    return (
        <div className="container">
            <div className="left">
                <div className="calendar">
                    <div className="month">
                        <FaAngleLeft className="prev" onClick={handlePrevMonth} />
                        <div className="date">
                            {months[currentMonth.getMonth()]} {currentMonth.getFullYear()}
                        </div>
                        <FaAngleRight className="next" onClick={handleNextMonth} />
                    </div>
                    <div className="weekdays">
                        <div>Sun</div>
                        <div>Mon</div>
                        <div>Tue</div>
                        <div>Wed</div>
                        <div>Thu</div>
                        <div>Fri</div>
                        <div>Sat</div>
                    </div>
                    <div className="days">
                        {renderDays()}
                    </div>
                    <div className="goto-today">
                        <div className="goto">
                            <input type="text" placeholder="mm/yyyy" className="date-input" />
                            <button className="goto-btn">Go</button>
                        </div>
                        <button className="today-btn" onClick={() => setCurrentMonth(new Date())}>Today</button>
                    </div>
                </div>
            </div>
            <div className="right">
                <div className="today-date">
                    <div className="event-day">{currentMonth.toLocaleDateString('default', { weekday: 'long' })}</div>
                    <div className="event-date">{currentMonth.toDateString()}</div>
                </div>
                <div className="events">
                    {activeDay ? eventsArr.map((event, index) => (
                        <div key={index} className="event-item">
                            <span>{event.name}</span> from <span>{event.from}</span> to <span>{event.to}</span>
                        </div>
                    )) : <div>No events for today</div>}
                </div>
                {showAddEvent && (
                    <div className="add-event-wrapper">
                        <div className="add-event-header">
                            <div className="title">Add Event</div>
                            <FaTimes className="close" onClick={() => setShowAddEvent(false)} />
                        </div>
                        <div className="add-event-body">
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Name"
                                    value={newEvent.name}
                                    onChange={(e) => setNewEvent({ ...newEvent, name: e.target.value })}
                                />
                            </div>
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Time From"
                                    value={newEvent.from}
                                    onChange={(e) => setNewEvent({ ...newEvent, from: e.target.value })}
                                />
                            </div>
                            <div className="add-event-input">
                                <input
                                    type="text"
                                    placeholder="Event Time To"
                                    value={newEvent.to}
                                    onChange={(e) => setNewEvent({ ...newEvent, to: e.target.value })}
                                />
                            </div>
                        </div>
                        <div className="add-event-footer">
                            <button className="add-event-btn" onClick={handleAddEvent}>
                                Add Event
                            </button>
                        </div>
                    </div>
                )}
                <button className="add-event" onClick={() => setShowAddEvent(true)}>
                    <FaPlus />
                </button>
            </div>
        </div>
    );
};

export default CustomCalendar;





Current calendar style.css
:root {
    --primary-clr: #FF8200;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Poppins", sans-serif;
}

/* nice scroll bar */
/*::-webkit-scrollbar {
    width: 5px;
}
::-webkit-scrollbar-track {
    background: #FF8200;
    border-radius: 50px;
}
::-webkit-scrollbar-thumb {
    background: var(--primary-clr);
    border-radius: 50px;
}*/

body {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding-bottom: 30px;
    background-color: #e2e1dc;
}

.container {
    position: relative;
    width: 1200px;
    min-height: 850px;
    margin: 0 auto;
    padding: 5px;
    color: #fff;
    display: flex;

    border-radius: 10px;
    background-color: #373c4f;
}

.left {
    width: 60%;
    padding: 20px;
}

.calendar {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: space-between;
    color: #878895;
    border-radius: 5px;
    background-color: #fff;
}

/* set after behind the main element */
.calendar::before,
.calendar::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 100%;
    width: 12px;
    height: 97%;
    border-radius: 0 5px 5px 0;
    background-color: #d3d4d6d7;
    transform: translateY(-50%);
}

.calendar::before {
    height: 94%;
    left: calc(100% + 12px);
    background-color: rgb(153, 153, 153);
}

.calendar .month {
    width: 100%;
    height: 150px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 50px;
    font-size: 1.2rem;
    font-weight: 500;
    text-transform: capitalize;
}

.calendar .month .prev,
.calendar .month .next {
    cursor: pointer;
}

.calendar .month .prev:hover,
.calendar .month .next:hover {
    color: var(--primary-clr);
}

.calendar .weekdays {
    width: 100%;
    height: 100px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    font-size: 1rem;
    font-weight: 500;
    text-transform: capitalize;
}

.weekdays div {
    width: 14.28%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.calendar .days {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    padding: 0 20px;
    font-size: 1rem;
    font-weight: 500;
    margin-bottom: 20px;
}

.calendar .days .day {
    width: 14.28%;
    height: 90px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--primary-clr);
    border: 1px solid #f5f5f5;
}

.calendar .days .day:nth-child(7n + 1) {
    border-left: 2px solid #f5f5f5;
}

.calendar .days .day:nth-child(7n) {
    border-right: 2px solid #f5f5f5;
}

.calendar .days .day:nth-child(-n + 7) {
    border-top: 2px solid #f5f5f5;
}

.calendar .days .day:nth-child(n + 29) {
    border-bottom: 2px solid #f5f5f5;
}

.calendar .days .day:not(.prev-date, .next-date):hover {
    color: #fff;
    background-color: var(--primary-clr);
}

.calendar .days .prev-date,
.calendar .days .next-date {
    color: #b3b3b3;
}

.calendar .days .active {
    position: relative;
    font-size: 2rem;
    color: #fff;
    background-color: var(--primary-clr);
}

.calendar .days .active::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 0 0 10px 2px var(--primary-clr);
}

.calendar .days .today {
    font-size: 2rem;
}

.calendar .days .event {
    position: relative;
}

.calendar .days .event::after {
    content: "";
    position: absolute;
    bottom: 10%;
    left: 50%;
    width: 75%;
    height: 6px;
    border-radius: 30px;
    transform: translateX(-50%);
    background-color: var(--primary-clr);
}

.calendar .days .day:hover.event::after {
    background-color: #fff;
}

.calendar .days .active.event::after {
    background-color: #fff;
    bottom: 20%;
}

.calendar .days .active.event {
    padding-bottom: 10px;
}

.calendar .goto-today {
    width: 100%;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 5px;
    padding: 0 20px;
    margin-bottom: 20px;
    color: var(--primary-clr);
}

.calendar .goto-today .goto {
    display: flex;
    align-items: center;
    border-radius: 5px;
    overflow: hidden;
    border: 1px solid var(--primary-clr);
}

.calendar .goto-today .goto input {
    width: 100%;
    height: 30px;
    outline: none;
    border: none;
    border-radius: 5px;
    padding: 0 20px;
    color: var(--primary-clr);
    border-radius: 5px;
}

.calendar .goto-today button {
    padding: 5px 10px;
    border: 1px solid var(--primary-clr);
    border-radius: 5px;
    background-color: transparent;
    cursor: pointer;
    color: var(--primary-clr);
}

.calendar .goto-today button:hover {
    color: #fff;
    background-color: var(--primary-clr);
}

.calendar .goto-today .goto button {
    border: none;
    border-left: 1px solid var(--primary-clr);
    border-radius: 0;
}

.container .right {
    position: relative;
    width: 40%;
    min-height: 100%;
    padding: 20px 0;
}

.right .today-date {
    width: 100%;
    height: 50px;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
    justify-content: space-between;
    padding: 0 40px;
    padding-left: 70px;
    margin-top: 50px;
    margin-bottom: 20px;
    text-transform: capitalize;
}

.right .today-date .event-day {
    font-size: 2rem;
    font-weight: 500;
}

.right .today-date .event-date {
    font-size: 1rem;
    font-weight: 400;
    color: #878895;
}

.events {
    width: 100%;
    height: 100%;
    max-height: 600px;
    overflow-x: hidden;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    padding-left: 4px;
}

.events .event {
    position: relative;
    width: 95%;
    min-height: 70px;
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 5px;
    padding: 0 20px;
    padding-left: 50px;
    color: #fff;
    background: linear-gradient(90deg, #3f4458, transparent);
    cursor: pointer;
}

/* even event */
.events .event:nth-child(even) {
    background: transparent;
}

.events .event:hover {
    background: linear-gradient(90deg, var(--primary-clr), transparent);
}

.events .event .title {
    display: flex;
    align-items: center;
    pointer-events: none;
}

.events .event .title .event-title {
    font-size: 1rem;
    font-weight: 400;
    margin-left: 20px;
}

.events .event i {
    color: var(--primary-clr);
    font-size: 0.5rem;
}

.events .event:hover i {
    color: #fff;
}

.events .event .event-time {
    font-size: 0.8rem;
    font-weight: 400;
    color: #878895;
    margin-left: 15px;
    pointer-events: none;
}

.events .event:hover .event-time {
    color: #fff;
}

/* add tick in event after */
.events .event::after {
    content: "✓";
    position: absolute;
    top: 50%;
    right: 0;
    font-size: 3rem;
    line-height: 1;
    display: none;
    align-items: center;
    justify-content: center;
    opacity: 0.3;
    color: var(--primary-clr);
    transform: translateY(-50%);
}

.events .event:hover::after {
    display: flex;
}

.add-event {
    position: absolute;
    bottom: 30px;
    right: 30px;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    color: #878895;
    border: 2px solid #878895;
    opacity: 0.5;
    border-radius: 50%;
    background-color: transparent;
    cursor: pointer;
}

.add-event:hover {
    opacity: 1;
}

.add-event i {
    pointer-events: none;
}

.events .no-event {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    font-weight: 500;
    color: #878895;
}

.add-event-wrapper {
    position: absolute;
    bottom: 100px;
    left: 50%;
    width: 90%;
    max-height: 0;
    overflow: hidden;
    border-radius: 5px;
    background-color: #fff;
    transform: translateX(-50%);
    transition: max-height 0.5s ease;
}

.add-event-wrapper.active {
    max-height: 300px;
}

.add-event-header {
    width: 100%;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
    color: #373c4f;
    border-bottom: 1px solid #f5f5f5;
}

.add-event-header .close {
    font-size: 1.5rem;
    cursor: pointer;
}

.add-event-header .close:hover {
    color: var(--primary-clr);
}

.add-event-header .title {
    font-size: 1.2rem;
    font-weight: 500;
}

.add-event-body {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: 5px;
    padding: 20px;
}

.add-event-body .add-event-input {
    width: 100%;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
}

.add-event-body .add-event-input input {
    width: 100%;
    height: 100%;
    outline: none;
    border: none;
    border-bottom: 1px solid #f5f5f5;
    padding: 0 10px;
    font-size: 1rem;
    font-weight: 400;
    color: #373c4f;
}

.add-event-body .add-event-input input::placeholder {
    color: #a5a5a5;
}

.add-event-body .add-event-input input:focus {
    border-bottom: 1px solid var(--primary-clr);
}

.add-event-body .add-event-input input:focus::placeholder {
    color: var(--primary-clr);
}

.add-event-footer {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.add-event-footer .add-event-btn {
    height: 40px;
    font-size: 1rem;
    font-weight: 500;
    outline: none;
    border: none;
    color: #fff;
    background-color: var(--primary-clr);
    border-radius: 5px;
    cursor: pointer;
    padding: 5px 10px;
    border: 1px solid var(--primary-clr);
}

.add-event-footer .add-event-btn:hover {
    background-color: transparent;
    color: var(--primary-clr);
}

/* media queries */

@media screen and (max-width: 1000px) {
    body {
        align-items: flex-start;
        justify-content: flex-start;
    }

    .container {
        min-height: 100vh;
        flex-direction: column;
        border-radius: 0;
    }

    .container .left {
        width: 100%;
        height: 100%;
        padding: 20px 0;
    }

    .container .right {
        width: 100%;
        height: 100%;
        padding: 20px 0;
    }

    .calendar::before,
    .calendar::after {
        top: 100%;
        left: 50%;
        width: 97%;
        height: 12px;
        border-radius: 0 0 5px 5px;
        transform: translateX(-50%);
    }

    .calendar::before {
        width: 94%;
        top: calc(100% + 12px);
    }

    .events {
        padding-bottom: 340px;
    }

    .add-event-wrapper {
        bottom: 100px;
    }
}

@media screen and (max-width: 500px) {
    .calendar .month {
        height: 75px;
    }

    .calendar .weekdays {
        height: 50px;
    }

    .calendar .days .day {
        height: 40px;
        font-size: 0.8rem;
    }

    .calendar .days .day.active,
    .calendar .days .day.today {
        font-size: 1rem;
    }

    .right .today-date {
        padding: 20px;
    }
}

.credits {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    text-align: center;
    padding: 10px;
    font-size: 12px;
    color: #fff;
    background-color: #b38add;
}

.credits a {
    color: #fff;
    text-decoration: none;
    font-weight: 600;
}

.credits a:hover {
    text-decoration: underline;
}




Lines of code I added throughout the revamped homepage (src/app/page.js):
<main className="flex min-h-screen flex-col p-6 bg-gray-50">
            /* Navigation Bar */
            <nav className="flex items-center justify-between h-16 bg-orange-500 p-4 rounded-lg">
                <h1 className="text-white text-xl md:text-3xl font-bold">Gain & Grain</h1>
                <div className="flex space-x-4 md:space-x-8">
                    <Link href="/dashboard/calendar">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Calendar
                        </button>

     <Link href="/dashboard/savedMeals">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Nutrition
                        </button>
     <Link href="/dashboard/savedWorkouts">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Exercise
                        </button>
     <Link href="/login">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Login
                        </button>
      <Link href="/register">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Register
                        </button>
     <Link href="/post">
                        <button className="bg-gray-100 text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
                            Post
                        </button>
 </div>
                
                <div className="relative">
                    <input
                        type="text"
                        placeholder="Search..."
                        className="transition-width duration-300 ease-in-out w-12 h-10 px-2 rounded-lg focus:w-48 focus:outline-none"
                    />
                </div>
            </nav>

            
            <section className="mt-8">
                <div className="flex h-20 shrink-0 items-end justify-between rounded-lg bg-orange-500 p-4 md:h-52 md:items-center">
                    <h2 className="text-white text-xl md:text-4xl font-bold">
                        Welcome to the Gain & Grain Home Page
                    </h2>
                    <Link href="/profile">
                        <button className="bg-white text-orange-500 font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 hover:text-white transition-all">
                            Profile
                        </button>
                    </Link>
                </div>
            </section>

"use client";

import Link from "next/link";
import { useState } from "react";
 const [visibleComments, setVisibleComments] = useState({});

    const toggleComments = (postId) => {
        setVisibleComments((prev) => ({
            ...prev,
            [postId]: !prev[postId],
        }));
    };


                {/* Search bar positioned in the center */}
                <div className="flex-grow flex justify-center">
                    <input
                        type="text"
                        placeholder="Search..."
                        className="transition-width duration-500 ease-in-out h-10 px-2 rounded-lg w-96"
                    />
                </div>

                {/* Buttons positioned to the right */}

            {/* Feed Section */}
            <div className="flex justify-center mt-8 w-full">
                <div className="flex flex-col items-center max-w-2xl w-full">
                    {[1, 2].map((postId) => (
                        <div className="relative post bg-white border border-gray-300 mb-5 rounded-lg w-full">
                            <div className="post-header flex items-center p-3">
                                <img src="https://via.placeholder.com/40" alt="User Profile" className="rounded-full mr-2" />
                                <h3 className="text-lg">@user{postId}</h3>
                            </div>
                            <div className="post-image">
                                <img src="https://via.placeholder.com/600x400" alt="Post Image" className="w-full rounded-t-lg" />
                            </div>
                            <div className="post-content p-3">
                                <h4 className="text-xl">Post Title {postId}</h4>
                                <p className="text-gray-700">This is a description of post {postId}.</p>
                            </div>
                            <div className="post-actions flex justify-around mb-3">
                                <button className="hover:underline">Like</button>
                                <button className="hover:underline" onClick={() => toggleComments(postId)}>Comment</button>
                                <button className="hover:underline">Share</button>
                            </div>
                        </div>
                    ))}
                </div>

                {/* Comments Section */}
                <div className="comments-container flex flex-col ml-4">
                    {Object.keys(visibleComments).map((postId) =>
                        visibleComments[postId] ? (
                            <div className="comments-section bg-white p-3 rounded-lg mt-3 w-64">
                                <h4 className="font-bold">Comments</h4>
                                <div className="comment mb-2"><strong>@user456:</strong> Great post!</div>
                                <div className="comment"><strong>@fitguru:</strong> Really informative!</div>
                            </div>
                        ) : null
                    )}
                </div>
            </div>

Code added to calendar style.css:
body {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: flex-start;
    /* Change to flex-start */
    justify-content: center;
    /* Center horizontally */
    padding: 30px 0;
    /* Add padding to the top and bottom */
    background-color: #e2e1dc;
}

 margin-top: 30px;
    /* Add margin at the top */
}

/* Media query adjustments for smaller screens */
@media screen and (max-width: 1000px) {
    body {
        align-items: flex-start;
        /* Ensure elements start at the top */
        justify-content: flex-start;
    }

    .container {
        min-height: 100vh;
        flex-direction: column;
        border-radius: 0;
        margin-top: 0;
        /* Remove margin-top for smaller screens */
    }
