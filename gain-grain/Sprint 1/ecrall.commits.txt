DISCLAIMER: Our group was having trouble with the 'git blame' command so I decided
to show clearly in this document the code that I wrote for this Sprint. Moving
forward, if you need a different format please let me know.





**gain-grain/src/app/login/login.module.css

.body {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.body::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('../../public/images/login-background.png') no-repeat center center;
  background-size: cover;
  filter: blur(4px);
  z-index: -1;
}

.wrapper{
  width: 420px;
  border: 2px solid rgba(255,255,255,.2);
  box-shadow: 0 0 10px rgba(0,0,0,.2);
  color: var(--vol-orange);
  background-color: #f3dac1c5;
  border-radius: 10px;
  padding: 30px 40px;
  z-index: 1;
}

.wrapper .login-title{
  font-size: 45px;
  text-align: center;
  color: var(--vol-orange);
}

.wrapper .input-box{
  position: relative;
  width: 100%;
  height: 50px;
  margin: 30px 0;
}

.input-box input{
  width: 100%;
  height: 100%;
  background: transparent ;
  border: none;
  outline: none ;
  border: 2px solid #757575;
  border-radius: 40px;
  font-size: 16px;
  color: var(--smokey-gray);
  padding: 20px 45px 20px 20px;
}

.input-box input:focus {
  border: 2px solid var(--vol-orange);
}

.input-box input::placeholder{
  color: #757575;
}

.input-box i{
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 20px ;
}

.wrapper .remember-forget{
  display: flex;
  justify-content: space-between;
  font-size: 14.5px;
  margin: -15px 0 15px;
}

.remember-forget label input{
  accent-color: var(--smokey-gray);
  margin-right: 3px ;
}

.remember-forget label {
  color: #757575;
}

.remember-forget a{
  color: #757575;
  text-decoration: none;
}
.remember-forget a:hover{
  text-decoration: underline;
}

.wrapper .btn  {
  width: 100%;
  height: 45px;
  background: var(--vol-orange);
  border: none;
  outline: none;
  border-radius: 40px ;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  cursor: pointer;
  font-size: 16px;
  color: #fff;
  font-weight: 600;
}

.wrapper .btn:hover{
  background: #ec8021;
  color: #fff;
  border-color: #fff;
}

.wrapper .register-link {
  font-size: 14.5px;
  text-align: center;
  margin: 20px 0 15px ;
}

.register-link p a {
  color: var(--vol-orange);
  text-decoration: none;
  font-weight: 600;
}

.register-link p {
  color: var(--smokey-gray);
}

.register-link p a:hover{
  text-decoration: underline;
}





**gain-grain/src/app/login/page.js

"use client";

import Link from 'next/link';
import { useState } from 'react';
import styles from './login.module.css'
import { LockClosedIcon, UserIcon } from '@heroicons/react/solid';

export default function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [alertMessage, setAlertMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!username || !password) {
      setAlertMessage('Username and password fields are required.');
      return;
    }

    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        window.location.href = '/';
      } else {
        setAlertMessage(data.message || 'An error occurred. Please try again.');
      }
    } catch (error) {
      setAlertMessage('An error occurred. Please try again.');
    }
  };

  return (
    <div className={styles.body}>
      <div className={styles.wrapper}>
        <form action="">
          <h1 className={styles['login-title']}>Login</h1>
          <div className={styles['input-box']}>
            <input type="text" placeholder="Username" required />
            <i className='bx bxs-user'>
              <UserIcon className="w-6 h-6" />
            </i>
          </div>
          <div className={styles['input-box']}>
            <input type="password" placeholder="Password" required />
            <i className='bx bxs-lock-alt'>
              <LockClosedIcon className="w-6 h-6" />
            </i>
          </div>
          <div className={styles['remember-forget']}>
            <label>
              <input type="checkbox" />
              Remember me
            </label>
            <a href="/login/forgot"> Forgot password?</a>
          </div>
          <button type="submit" className={styles.btn}>Login</button>
          <div className={styles['register-link']}>
            <p>Don't have an account? <a href="/register">Register</a></p>
          </div>
        </form>
      </div>
    </div>
  );
}





**gain-grain/src/app/login/forgot/forgot.modules.css

.body {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: var(--powder-blue);
}
  
.wrapper {
    width: 420px;
    border: 2px solid rgba(255,255,255,.2);
    box-shadow: 0 0 10px rgba(0,0,0,.2);
    color: var(--smokey-gray);
    background-color: #fff;
    border-radius: 10px;
    padding: 30px 40px;
}

.icon-circle {
    display: flex;
    justify-content: center; 
    align-items: center;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: #f0f0f0;
    border: 2px solid #4b4b4b;
    margin: 0 auto;
}

.icon-circle svg {
    width: 100px;
    height: 60px;
}

.forgot {
    padding-top: 10px;
    text-align: center;
    margin: 20px 0;
}

.forgot-message {
    padding-top: 2px;
    color: #949494;
}


.wrapper .input-box{
    position: relative;
    width: 100%;
    height: 50px;
    margin: 30px 0;
}

.input-box input{
    width: 100%;
    height: 100%;
    background: transparent;
    border: none;
    outline: none;
    border: 2px solid #757575;
    border-radius: 40px;
    font-size: 16px;
    color: #757575;
    padding: 20px 45px 20px 20px;
}

.input-box input:focus {
    border: 2px solid var(--powder-blue);
}

.input-box input::placeholder{
    color: #757575;
}

.wrapper .btn  {
    width: 100%;
    height: 45px;
    background: var(--smokey-gray);
    border: none;
    outline: none;
    border-radius: 40px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    cursor: pointer;
    font-size: 16px;
    color: #fff;
    font-weight: 600;
}

.wrapper .btn:hover{
    background: #6a6a6a;
    color: #fff;
    border-color: #fff;
}

.wrapper .register-link {
    font-size: 14.5px;
    text-align: center;
    margin: 20px 0 15px;
}

.register-link p a {
    color: var(--powder-blue);
    text-decoration: none;
    font-weight: 600;
}

.register-link p {
    color: var(--smokey-gray);
}

.register-link p a:hover{
    text-decoration: underline;
}





**gain-grain/src/app/login/forgot/page.js

import Link from 'next/link';
import React from 'react';
import styles from './forgot.module.css'
import { LockClosedIcon } from '@heroicons/react/solid';
export const metadata = {
    title: "G&G Forgot Password",
    description: "Recover your Gain & Grain account password",
};

export default function ForgotPassword() {
    return(
        <div className={styles.body}>
            <div className={styles.wrapper}>
                <form action="">
                <div className={styles['icon-circle']}>
                    <LockClosedIcon className="w-6 h-6" />
                </div>
                <div className={styles['forgot']}>
                    <p className={styles['forgot-title']}>Having trouble logging in?</p>
                    <p className={styles['forgot-message']}>Enter your email and we'll send you a link
                        to get back into your account.
                    </p>
                </div>
                <div className={styles['input-box']}>
                    <input type="text" placeholder="Email" required />
                </div>
                <button type="submit" className={styles.btn}>Reset Password</button>
                <div className={styles['register-link']}>
                    <p>Don't have an account? <a href="/register">Register</a></p>
                </div>
                </form>
            </div>
        </div>
    );
}





**gain-grain/src/app/register/register.modules.css

.body {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--vol-orange);
}

.welcomeText {
    color: #fff;
    text-align: left;
    margin-left: 100px;
    overflow-wrap: normal;
    width: 28%;
    text-align: center;
}

.welcomeText h1 {
    width: 35vw;
    font-size: 6vw;
    margin: 0;
    line-height: 1.2;
}

.wrapper {
    position: relative;
    max-width: 430px;
    width: 100%;
    background: #fff;
    padding: 34px;
    border-radius: 6px;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.wrapper h2 {
    position: relative;
    font-size: 22px;
    font-weight: 600;
    color: var(--smokey-gray);
}

.wrapper h2::before {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    height: 3px;
    width: 28px;
    border-radius: 12px;
    background: var(--vol-orange);
}

.wrapper form {
    margin-top: 30px;
}

.wrapper form .inputBox {
    height: 52px;
    margin: 18px 0;
}

.inputBox input {
    height: 90%;
    width: 100%;
    outline: none;
    padding: 0 15px;
    font-size: 17px;
    font-weight: 400;
    color: #333;
    border: 1.5px solid #C7BEBE;
    border-bottom-width: 2.5px;
    border-radius: 6px;
    transition: all 0.3s ease;
    }

.inputBox input:focus,
.inputBox input:valid {
    border-color: var(--vol-orange);
}

.inputBox.button input {
    color: #fff;
    letter-spacing: 1px;
    border: none;
    background: var(--vol-orange);
    cursor: pointer;
}

.inputBox.button input:hover {
    background: #ec8021;
    color: #fff;
    border-color: #fff;
}
  
.text h3 {
    color: var(--smokey-gray);
    width: 100%;
    text-align: center;
}
  
.text h3 a {
    color: var(--vol-orange);
    text-decoration: none;
}
  
.text h3 a:hover {
    text-decoration: underline;
}





**gain-grain/src/app/register/page.js

import Link from 'next/link';
import React from 'react';
import styles from './register.module.css'
export const metadata = {
    title: "G&G Register",
    description: "Register an account with Gain & Grain",
};

export default function Register() {
    return(
        <div className={styles.body}>
            <div className={styles.wrapper}>
                <h2>Registration</h2>
                <form action="#">
                    <div className={styles.inputBox}>
                        <input type="text" placeholder="Enter your full name" required />
                    </div>
                    <div className={styles.inputBox}>
                        <input type="text" placeholder="Enter your email" required />
                    </div>
                    <div className={styles.inputBox}>
                        <input type="text" placeholder="Enter your username" required />
                    </div>
                    <div className={styles.inputBox}>
                        <input type="password" placeholder="Create password" required />
                    </div>
                    <div className={styles.inputBox}>
                        <input type="password" placeholder="Confirm password" required />
                    </div>
                    <div className={`${styles.inputBox} ${styles.button}`}>
                        <input type="submit" value="Register Now" />
                    </div>
                    <div className={styles.text}>
                        <h3>Already have an account? <a href="/login">Login now</a></h3>
                    </div>
                </form>
            </div>
            <div className={styles.welcomeText}>
                <h1>Welcome to Gain & Grain!</h1>
            </div>
        </div>
    );
}





**gain-grain/src/utils/userModel.js

import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  username: { type: String, required: true },
  password: { type: String, required: true },
});

const User = mongoose.models.User || mongoose.model('User', userSchema);

export const createAndSaveUser = async (name, username, password) => {
  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new User({ name, username, password: hashedPassword });
  return newUser.save();
};

export const findUser = async (username, password) => {
  const userFound = await User.findOne({ username });
  if (!userFound) {
    return { success: false, message: 'Username or password is incorrect.' };
  }

  const isMatch = await bcrypt.compare(password, userFound.password);
  if (!isMatch) {
    return { success: false, message: 'Username or password is incorrect.' };
  }

  return { success: true, user: userFound };
};