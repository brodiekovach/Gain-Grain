I made this commits.txt manually from my commits history as I did last time. I wasn't able to use blame-tracker due to this error:

Non-code related work:
Researched and found hosting platform Vercel
Setup hosting for Vercel

PS C:\Users\trevo\OneDrive\Documents\School\COSC340\Gain-Grain\gain-grain> python3 blame-tracker.py -by "teisenba" --since "10/1/2024" -o '.\Sprint 2\teisenba.commits.txt'  
Exception in thread Thread-3109 (_readerthread):
Traceback (most recent call last):
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\threading.py", line 1045, in _bootstrap_inner
    self.run()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\threading.py", line 982, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\subprocess.py", line 1599, in _readerthread
    buffer.append(fh.read())
                  ^^^^^^^^^
  File "<frozen codecs>", line 322, in decode
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x96 in position 414: invalid start byte
Traceback (most recent call last):
  File "C:\Users\trevo\OneDrive\Documents\School\COSC340\Gain-Grain\gain-grain\blame-tracker.py", line 490, in <module>
    main()
  File "C:\Users\trevo\OneDrive\Documents\School\COSC340\Gain-Grain\gain-grain\blame-tracker.py", line 125, in main
    accusations_by_file = accuse_files(args.repo, files, args.verbose, args.silence_warnings)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\trevo\OneDrive\Documents\School\COSC340\Gain-Grain\gain-grain\blame-tracker.py", line 445, in accuse_files
    all_accusations[file] = extract_accusations_from_line_porcelain_output(line_porcelain_output)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\trevo\OneDrive\Documents\School\COSC340\Gain-Grain\gain-grain\blame-tracker.py", line 377, in extract_accusations_from_line_porcelain_output
    for i, section in enumerate(re.split('[a-fA-F0-9]{40} \d+ \d+.*', line_porcelain_output)):
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\re\__init__.py", line 206, in split
    return _compile(pattern, flags).split(string, maxsplit)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: expected string or bytes-like object, got 'NoneType'

gain-grain/src/app/page.js:
    import Navbar from "../components/Navbar";
    <main className="flex min-h-screen flex-col bg-gray-50">

    // Home.js
    import Navbar from "../components/Navbar"; // Adjust the path based on your file structure
    import Feed from "../components/Feed";
    import Comments from "../components/Comments";
    {/* Navbar */}
    <Navbar />
    <Feed toggleComments={toggleComments} visibleComments={visibleComments} />
    {/* Comments Section */}
    <Comments visibleComments={visibleComments} />

gain-grain/src/components/Comments.js:
    // Comments.js
    export default function Comments({ visibleComments }) {
        return (
            <div className="comments-container flex flex-col ml-4">
                {Object.keys(visibleComments).map((postId) =>
                    visibleComments[postId] ? (
                        <div key={postId} className="comments-section bg-white p-3 rounded-lg mt-3 w-64">
                            <h4 className="font-bold">Comments</h4>
                            <div className="comment mb-2"><strong>@user456:</strong> Great post!</div>
                            <div className="comment"><strong>@fitguru:</strong> Really informative!</div>
                        </div>
                    ) : null
                )}
            </div>
        );
    }

gain-grain/src/components/Feed.js:
    // Feed.js
    import { useState } from "react";
    export default function Feed({ toggleComments, visibleComments }) {
        return (
            <div className="flex justify-center mt-8 w-full">
                <div className="flex flex-col items-center max-w-2xl w-full">
                    {[1, 2].map((postId) => (
                        <div key={postId} className="relative post bg-white border border-gray-300 mb-5 rounded-lg w-full">
                            <div className="post-header flex items-center p-3">
                                <img src="https://via.placeholder.com/40" alt="User Profile" className="rounded-full mr-2" />
                                <h3 className="text-lg">@user{postId}</h3>
                            </div>
                            <div className="post-image">
                                <img src="https://via.placeholder.com/600x400" alt="Post Image" className="w-full rounded-t-lg" />
                            </div>
                            <div className="post-content p-3">
                                <h4 className="text-xl">Post Title {postId}</h4>
                                <p className="text-gray-700">This is a description of post {postId}.</p>
                            </div>
                            <div className="post-actions flex justify-around mb-3">
                                <button className="hover:underline">Like</button>
                                <button className="hover:underline" onClick={() => toggleComments(postId)}>Comment</button>
                                <button className="hover:underline">Share</button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        );
    }

gain-grain/src/components/Navbar.js:
    <main className="flex min-h-screen flex-col bg-gray-50">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg box-shadow:0 hover:bg-orange-500 hover:text-white transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">
    function toggleHamburgerDropdown() {
            if (showDropdown) {
            // Fade out
                setIsVisible(false);
                setTimeout(() => setShowDropdown(false), 200); 
            } 
            else {
                // Fade in
                setShowDropdown(true);            
                setTimeout(() => setIsVisible(true), 0); 
            }
        }
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
    <Link href="/dashboard/savedMeals">
                                    {/* nutrition button */}
                                    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
                                        Nutrition
                                    </button>
                                </Link>
                                
                                <Link href="/dashboard/savedWorkouts">
                                    {/* exercise button*/}
                                    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
                                        Exercise
                                    </button>
                                </Link>

    <div className={styles.buttonContainer}>
                    <Link href="/dashboard/calendar">
                        <button className="bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
                            Calendar
                        </button>
                    </Link>
                    <Link href="/post">
                        <button className="bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-all">
                            Post
                        </button>
                    </Link>
                </div>
    <div className={styles.hamburgerButton} onClick={toggleHamburgerDropdown}>
                    <Bars3Icon className="size-7 text-white rounded-lg hover:bg-orange-600"/>
    <button className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-500 hover:text-white transition-all">

    <div>
                    <img
                        className={styles.logo} 
                        height={50} 
                        width={150}
                        onClick={() => window.location.href = '/'}
                    ></img>

    // functionality to make hamburger menu appear
        function toggleHamburgerDropdown(){
            setShowDropdown(!showDropdown)
        }
    // orange bar
            <nav className={styles.bigBar}>
                {/* gain & grain logo top left */}
                <div className="flex flex-col justify-center items-center">
                    <div className={styles.logo}></div>
                </div>
                {/* search bar */}
                <div className="flex-grow w-full flex justify-center items-center">
                className={styles.searchBar}
                {/* hamburger options menu */}
                <div className={styles.hamburgerDropdown} onClick={toggleHamburgerDropdown}>
                    <Bars3Icon className="size-7 text-white"/>
                {/* make the dropdown appear if it has been clicked */}
                    {showDropdown ?
                        <div className={styles.hamburgerMenu}>
                            <div className="flex flex-col space-y-1 my-1">
            
gain-grain/src/components/navbar.module.css:
    @media screen and (max-width: 1000px) {
        .logo {
            display: none;
        }
        .centerContainer {
            justify-content: start;
        }
        .searchBar {
            margin-left: 0px;
        }
        .searchBar:hover,
        .searchBar:focus {
            width: 10rem;
        }   
    }
    @media screen and (max-width: 650px) {
        .searchBar {
            width: 10rem;
        }
        .searchBar:hover,
        .searchBar:focus {
            width: 10rem;
        }   
    }
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    outline: none;
    border: none;
    background-color: transparent;
    background-color: white; 
    outline: none;
    border: 1px solid transparent;
    /* Centering the search bar container */
    .centerContainer {
        flex: 1; /* Make it take available space */
        display: flex;
        justify-content: center; /* Center the search bar */
        align-items: center; /* Center vertically */
    }
    .buttonContainer {
        display: flex;
        align-items: center;
        gap: 1rem; 
    }
    .hamburgerButton {
    padding-left: 20px;
        padding-right: 10px;
        cursor: pointer;
    }
    .hamburgerButton:hover {
    background-color: #F97316;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease, color 0.3s ease;
    .hamburgerMenu {
        width: 10vw;
    background-image: url('../public/images/logo.png');
        height: 60px;
        width: 60px;

    .bigBar {
        display: flex;
        width: 100%;
        align-items: center;
        justify-content: space-between;
        height: 4rem; /* or 64px */
        background-color: #F97316; /* Tailwind's orange-500 */
        padding: 1rem; /* or 16px */
    }
    .logo {
        width: 12rem; /* Adjust the size as needed */
        height: 8rem; /* Adjust the size as needed */
        background-image: url('/../public/images/logo.jpg'); /* Path to your image */
        background-size: contain; /* Ensures the image fits the div */
        background-repeat: no-repeat; /* Prevents the image from repeating */
        background-position: center; /* Centers the image */
    }
    .searchBar {
        width: 20rem;
        background-color: white; /* bg-gray-200 equivalent */
        padding: 0.5rem;
        border-radius: 0.5rem;
        transition: width 0.3s ease-in-out;
        outline: none; /* Removes the default focus outline */
        border: 1px solid transparent; /* Initial transparent border */
    }
    
    .searchBar:hover,
    .searchBar:focus {
        width: 30rem;
    .hamburgerDropdown .hamburgerMenu {
        width: 15vw;
        background-color: lightgrey;
        position: absolute;
        right: 0;
        top: 64px;
        z-index: 1;
    }

gain-grain/src/app/post/page.js:
    {/* background grey */}
    {/* white pane in center screen */}

    gain-grain/src/app/api/profile/get-user-by-id/route.js:
    import { NextResponse } from 'next/server';
    import { getUserById } from '@/utils/userModel';
    export async function POST(req) {
    try {
        const body = await req.json();
        const { userId } = body;
        const result = await getUserById(userId);
        if(result.success) {
        return NextResponse.json({ success: true, user: result.user })
        } else {
        return NextResponse.json(result, { status: 400 });
        }
    } catch (error) {
        console.error('Error when searching for user:', error);
        return NextResponse.json({ success: false, message: 'Server error.' }, { status: 500 });
    }
    }
    export async function GET() {
    return NextResponse.json({ success: false, message: 'Method GET not allowed.' }, { status: 405 });
    }
    <button className="bg-[#4CAF50] hover:bg-[#45A049] text-white font-bold h-16 w-full rounded text-lg flex items-center justify-center">
    <button className="bg-[#FF5722] hover:bg-[#E64A19] text-white font-bold h-16 w-full rounded text-lg flex items-center justify-center">
    <button className="bg-[#3F51B5] hover:bg-[#303F9F] text-white font-bold h-16 w-full rounded text-lg flex items-center justify-center">
    <button className="bg-[#FFC107] hover:bg-[#FFA000] text-white font-bold h-16 w-full rounded text-lg flex items-center justify-center">

gain-grain/src/app/profile/page.js:
    "use client";
    import React, { useEffect, useState} from "react";   
    // import { getSession } from 'next-auth/react';    
    import styles from './profile.module.css'
    import { useSearchParams } from 'next/navigation';
    const [user, setUser] = useState('');
    const [error, setError] = useState(null);
    const [validId, setValidId] = useState(false);
    const searchParams = useSearchParams();
    const userId = searchParams.get('userId');
    useEffect(() => {
        const fetchUserData = async () => {
        if (!userId) {
            setError('No User ID provided');
            return;
        }
        
        try {
            const response = await fetch('/api/profile/get-user-by-id', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
            });
            if (!response.ok) throw new Error('Failed to fetch user data');
            const data = await response.json();
            if (data.success) {
            setUser(data.user);
            setValidId(true);
            } else {
            setError(data.message || 'Failed to fetch user data');
            }
        } catch (error) {
            setError(error.message);
        }
        };
        fetchUserData();
    }, [userId]);
    return (
        <div>
        {validId ? (
            <>
            <div className="flex items-center space-x-6">
                <div className="w-24 h-24">
                    <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/>
                    <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"/>
                </svg>
                </div>
                <div>
                <ul>
                    <p>Followers: {user.numFollowers}</p>
                    <p>Following: {user.numFollowing}</p>
                </ul>
                <h1 className="text-2xl font-bold">{user.username} </h1>
                <p className="text-gray-600">User's Bio:
                    <p>{user.bio}</p>
                </p>
                </div>
                <button>Edit profile</button>
            </div>
            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">Saved Workouts</h2>
            </div>
            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">Saved Meals</h2>
            </div>
            </>
        ) : (
            <div className={styles.wrapper}>
            <p className={styles.errorMessage}>{error}</p>
        )}
        </div>
    );
    };
    // export async function getServerSideProps(context) {
    //   const session = await getSession(context);
    //   if (!session || !session.user) {
    //     return {
    //       redirect: {
    //         destination: '../login', 
    //         permanent: false,
    //       },
    //     };
    //   }
    //   const userId = session.user.id;
    //   return {
    //     props: {
    //       userId,
    //     },
    //   };
    // }

gain-grain/src/app/profile/profile.module.css:
    .wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--vol-orange);
        width: 100vw;
        height: 100vh;
    }
    .errorMessage {
        font-size: 30px;
        color: white;
    }

gain-grain/src/utils/userWorkout.js:
    import mongoose from 'mongoose';
    import clientPromise from './mongodb';
    const workoutSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    exercises: [
        {
        name: { type: String, required: true },
        Sets: { type: Number },
        Reps: { type: Number },
        }
    ]
    });
    const Workout = mongoose.models.Workout || mongoose.model('Workout', workoutSchema);
    // Function to create a workout
    export const createWorkout = async (userId, exercises) => {
    const client = await clientPromise; // Use the MongoDB client
    const db = client.db(); // Access the database
    const workoutsCollection = db.collection('workouts'); // Access the workouts collection
    const result = await workoutsCollection.insertOne({ userId, exercises, date: new Date() }); // Insert the workout
    return result; // Return the result of the insert operation
    };
    // Function to find workouts by userId
    export const findWorkoutsByUserId = async (userId) => {
    const client = await clientPromise; // Use the MongoDB client
    const db = client.db(); // Access the database
    const workoutsCollection = db.collection('workouts'); // Access the workouts collection
    const workouts = await workoutsCollection.find({ userId }).toArray(); // Find workouts by userId
    return workouts; // Return the list of workouts
    };
    // Function to delete a workout by ID
    export const deleteWorkoutById = async (workoutId) => {
    const client = await clientPromise; // Use the MongoDB client
    const db = client.db(); // Access the database
    const workoutsCollection = db.collection('workouts'); // Access the workouts collection
    const result = await workoutsCollection.deleteOne({ _id: new mongoose.Types.ObjectId(workoutId) }); // Delete the workout by ID
    return result; // Return the result of the delete operation
    };
    export default Workout;

gain-grain/src/app/dashboard/calendar/style.css:
    background-color: var(--powder-blue); /* Darken color on hover */

gain-grain/src/app/api/login/find-user/route.js:
    if (result.success) {
            // Return the userId along with the success response
            return NextResponse.json({ success: true, userId: result.user._id.toString() });
        } else {
            return NextResponse.json({ success: false, message: result.message }, { status: 401 });
        }

gain-grain/src/app/api/meals/saveToProfile/route.js:
    import { NextResponse } from "next/server";
    import clientPromise from "@/utils/mongodb";
    export async function POST(req) {
        try {
            const body = await req.json();
            const { userId, meal, date } = body;
            if (!userId || !meal || !date) {
                return NextResponse.json({ success: false, message: 'Missing required fields'});
            }
            const client = await clientPromise;
            const db = client.db();
            const result = await db.collection('meals').insertOne({
                userId,
                meal: {
                    name: meal.name,
                    ingredients: meal.ingredients,
                    calories: meal.calories,
                },
                date,
            });
            return NextResponse.json({ success: true, data: result });
        } catch (error) {
            console.error('Error in save meals API:', error);
            return NextResponse.json({ success: false, message: 'Server error'});
        }
    }
    import { NextResponse } from "next/server";
    import clientPromise from "@/utils/mongodb";
    export async function POST(req) {
        try {
            const body = await req.json();
            const { userId, meal, date } = body;
            if (!userId || !meal || !date) {
                return NextResponse.json({ success: false, message: 'Missing required fields'});
            }
            const client = await clientPromise;
            const db = client.db();
            const result = await db.collection('meals').insertOne({
                userId,
                meal: {
                    name: meal.name,
                    ingredients: meal.ingredients,
                    calories: meal.calories,
                },
                date,
            });
            return NextResponse.json({ success: true, data: result });
        } catch (error) {
            console.error('Error in save meals API:', error);
            return NextResponse.json({ success: false, message: 'Server error'});
        }
    }

gain-grain/src/app/api/workouts/saveToProfile/route.js:
    import { NextResponse } from 'next/server';
    import clientPromise from '@/utils/mongodb';
    export async function POST(req) {
        try {
            const body = await req.json();
            const { userId, exercises, date } = body;
            if (!userId || !exercises || !date) {
                return NextResponse.json({ success: false, message: 'Missing required fields' }, { status: 400 });
            }
            const client = await clientPromise;
            const db = client.db();
            const result = await db.collection('workouts').insertOne({
                userId, // This should now store the actual ObjectId
                exercises,
                date,
            });
            return NextResponse.json({ success: true, data: result });
        } catch (error) {
            console.error('Error in save workout API:', error);
            return NextResponse.json({ success: false, message: 'Server error' }, { status: 500 });
        }
    }
    import { NextResponse } from 'next/server';
    import clientPromise from '@/utils/mongodb';
    export async function POST(req) {
        try {
            const body = await req.json();
            const { userId, exercises, date } = body;
            if (!userId || !exercises || !date) {
                return NextResponse.json({ success: false, message: 'Missing required fields' }, { status: 400 });
            }
            const client = await clientPromise;
            const db = client.db();
            const result = await db.collection('workouts').insertOne({
                userId, // This should now store the actual ObjectId
                exercises,
                date,
            });
            return NextResponse.json({ success: true, data: result });
        } catch (error) {
            console.error('Error in save workout API:', error);
            return NextResponse.json({ success: false, message: 'Server error' }, { status: 500 });
        }
    }

gain-grain/src/app/dashboard/calendar/page.js:
    <main className="calendar-main">
                <Navbar/>
    const saveWorkoutToProfile = async () => {
            const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage (adjust as needed)
            if (!userId) {
                alert('User not logged in');
                return;
            }
            console.log('UserId retrieved from localStorage:', userId); // Log userId for debugging
            try {
                const response = await fetch('/api/workouts/saveToProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId, 
                        exercises: selectedExercises,
                        date: selectedDate,   
                    }),
                });
                const data = await response.json();
                if (data.success) {
                    alert('Workout saved successfully!');
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error saving workout:', error);
                alert('Failed to save workout');
            }
        };
        const saveMealToProfile = async (meal) => {
            const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage (adjust as needed)
        
            if (!userId) {
                alert('User not logged in');
                return;
            }
        
            console.log('UserId retrieved from localStorage:', userId); // Log userId for debugging
        
            try {
                const MealData = {
                    name: meal.name,
                    ingredients: meal.ingredients,
                    calories: meal.calories,
                };
        
                const response = await fetch('/api/meals/saveToProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId, 
                        meal: MealData, 
                        date: selectedDate // Ensure selectedDate is defined in the scope
                    }),
                });
        
                const data = await response.json();
                if (data.success) {
                    alert('Meal saved successfully!');
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error saving meal:', error);
                alert('Failed to save meal');
            }
        };

    useEffect(() => {
            const userId = localStorage.getItem('userId');
            if (!userId) {
            // If the user is not logged in, redirect them to the login page
            window.location.href = '/login';
            }
        }, []);      
    const handleIngredientsChange = (e) => {
            const value = e.target.value;
            setMealIngredients(value.split(',').map(ingredient => ingredient.trim())); // Split by comma and trim spaces
        };
    if (showModal) {
                setMealName('');
                setMealCalories('');
                setMealIngredients([]);
                setMealUrl('');
            }
    const saveWorkoutToProfile = async () => {
            const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage (adjust as needed)
            if (!userId) {
                alert('User not logged in');
                return;
            }
            console.log('UserId retrieved from localStorage:', userId); // Log userId for debugging
            try {
                const response = await fetch('/api/workouts/saveToProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId, 
                        exercises: selectedExercises,
                        date: selectedDate,   
                    }),
                });
                const data = await response.json();
                if (data.success) {
                    alert('Workout saved successfully!');
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error saving workout:', error);
                alert('Failed to save workout');
            }
        };
        const saveMealToProfile = async (meal) => {
            const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage (adjust as needed)
        
            if (!userId) {
                alert('User not logged in');
                return;
            }
        
            console.log('UserId retrieved from localStorage:', userId); // Log userId for debugging
        
            try {
                const MealData = {
                    name: meal.name,
                    ingredients: meal.ingredients,
                    calories: meal.calories,
                };
        
                const response = await fetch('/api/meals/saveToProfile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId, 
                        meal: MealData, 
                        date: selectedDate // Ensure selectedDate is defined in the scope
                    }),
                });
        
                const data = await response.json();
                if (data.success) {
                    alert('Meal saved successfully!');
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error saving meal:', error);
                alert('Failed to save meal');
            }
        };
        
gain-grain/src/app/login/page.js:
    localStorage.setItem('userId', data.userId);
            console.log('UserId set in localStorage:', data.userId); // Log userId after setting it

gain-grain/src/app/app.css:
    .homepage-main {
    width: 100%;
    }

gain-grain/src/app/homepage.css:
    .homepage-main {
        width: 100%;
    }